var search_data = {"index":{"searchIndex":["knightmoves","square","find_path()","gen_board()","gen_edges()","new()","new()","print_path()"],"longSearchIndex":["knightmoves","knightmoves::square","knightmoves#find_path()","knightmoves#gen_board()","knightmoves::square#gen_edges()","knightmoves::new()","knightmoves::square::new()","knightmoves#print_path()"],"info":[["KnightMoves","","KnightMoves.html","","\n<pre>@board: represents the chess board where each object is accessed by x,y coordinates</pre>\n<p>x and y are assumed …\n\n"],["KnightMoves::Square","","KnightMoves/Square.html","","<p>@edges: array of connected nodes @name: string name of current square [x,y]\ncordinate @prev: name of …\n"],["find_path","KnightMoves","KnightMoves.html#method-i-find_path","(source,dest)","<p>finds one of the possible shortest path from source to destination squre\n\n<pre>*source: starting square\n*dest: ...</pre>\n"],["gen_board","KnightMoves","KnightMoves.html#method-i-gen_board","(size)","<p>generate board\n\n<pre>*size: size of board, area = size * size</pre>\n"],["gen_edges","KnightMoves::Square","KnightMoves/Square.html#method-i-gen_edges","(x,y,size)",""],["new","KnightMoves","KnightMoves.html#method-c-new","(size)",""],["new","KnightMoves::Square","KnightMoves/Square.html#method-c-new","(x,y,size)",""],["print_path","KnightMoves","KnightMoves.html#method-i-print_path","(node)",""]]}}